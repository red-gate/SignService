[CmdletBinding()]
param(
    # The url of the Octopus Deploy server to push the deployment package to.
    [string] $OctopusUrl,
    # The Octopus API Key used to push our packages to Octopus Deploy
    [string] $OctopusApiKey
)

$ErrorActionPreference = 'Stop'

Push-Location $PSScriptRoot
try {
    "`nCleanup remains from previous builds if any"
    if(Test-Path .output) {
        Remove-Item '.output' -Recurse
    }

    "`nChecking that dotnet is available: $(dotnet --version)"
    if($LASTEXITCODE -ne 0) { throw "dotnet --version failed with exit code $LASTEXITCODE"}

    "`nChecking that msbuild is available: $(msbuild /nologo /version)"
    if($LASTEXITCODE -ne 0) { throw "msbuild /nologo /version failed with exit code $LASTEXITCODE"}

    "`nmsbuild src/SignService/SignService.csproj /p:Configuration=Release /t:PrebuildScript"
    msbuild src/SignService/SignService.csproj /p:Configuration=Release /t:PrebuildScript

    "`ndotnet publish src/SignService/SignService.csproj --configuration Release --runtime win10-x64"
    dotnet publish src/SignService/SignService.csproj --configuration Release --runtime win10-x64
    if($LASTEXITCODE -ne 0) { throw "dotnet publish failed with exit code $LASTEXITCODE"}

    if(!(Get-Command dotnet-octo -ErrorAction 0)) {
        "`ndotnet tool install Octopus.DotNet.Cli --tool-path .tool"
        dotnet tool install Octopus.DotNet.Cli --tool-path .tools
        if($LASTEXITCODE -ne 0) { throw "dotnet tool install Octopus.DotNet.Cli failed with exit code $LASTEXITCODE"}

        $env:PATH = "${pwd}/.tools$([IO.Path]::PathSeparator)${env:PATH}"
    }

    # Version number is generated by https://github.com/dotnet/Nerdbank.GitVersioning/
    $VersionNumber = (Get-Item .\src\SignService\bin\Release\netcoreapp3.1\win10-x64\publish\SignService.dll).VersionInfo.ProductVersion

    dotnet octo pack --overwrite --id dotnet.signservice --version $VersionNumber --format zip --outfolder .output --basePath src/SignService/bin/Release/netcoreapp3.1/win10-x64/publish
    if($LASTEXITCODE -ne 0) { throw "dotnet octo pack dotnet.signservice failed with exit code $LASTEXITCODE"}

    if($OctopusApiKey -and $OctopusUrl) {
        dotnet octo push --server=$OctopusUrl --apikey=$OctopusApiKey "--package=.output/dotnet.signservice.${VersionNumber}.zip"
        if($LASTEXITCODE -ne 0) { throw "dotnet octo push dotnet.signservice failed with exit code $LASTEXITCODE"}
    } else {
        Write-Warning "-OctopusApiKey or -OctopusUrl was not set. Packages cannot be pushed to Octopus Deploy."
    }
} finally {
    Pop-Location
}